import {
  init_className
} from "./chunk-ODLOH7J2.js";
import {
  ClassNameGenerator_default,
  _objectWithoutPropertiesLoose,
  colorChannel,
  createBox,
  createCssVarsProvider,
  createPalette,
  createTheme_default,
  createTypography,
  deepmerge,
  init_createPalette,
  init_createTheme,
  init_createTransitions,
  init_createTypography,
  init_esm,
  init_esm2,
  init_objectWithoutPropertiesLoose,
  init_styled,
  init_useThemeProps
} from "./chunk-DFRXNCH6.js";
import {
  _extends,
  init_extends
} from "./chunk-X2GJ65LO.js";

// node_modules/@mui/material/Box/Box.js
init_esm2();

// node_modules/@mui/material/className/index.js
init_className();

// node_modules/@mui/material/styles/adaptV4Theme.js
init_extends();
init_objectWithoutPropertiesLoose();
init_esm2();

// node_modules/@mui/material/styles/index.js
init_esm2();
init_createTheme();

// node_modules/@mui/material/styles/createMuiStrictModeTheme.js
init_esm();
init_createTheme();

// node_modules/@mui/material/styles/cssUtils.js
function getUnit(input) {
  return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || "";
}
function toUnitless(length) {
  return parseFloat(length);
}

// node_modules/@mui/material/styles/responsiveFontSizes.js
init_extends();
init_esm();

// node_modules/@mui/material/styles/index.js
init_createTransitions();
init_useThemeProps();
init_styled();
init_styled();

// node_modules/@mui/material/styles/ThemeProvider.js
init_esm2();

// node_modules/@mui/material/styles/index.js
init_esm2();

// node_modules/@mui/material/styles/makeStyles.js
init_esm();

// node_modules/@mui/material/styles/withStyles.js
init_esm();

// node_modules/@mui/material/styles/withTheme.js
init_esm();

// node_modules/@mui/material/styles/CssVarsProvider.js
init_extends();
init_esm2();

// node_modules/@mui/material/styles/experimental_extendTheme.js
init_extends();
init_objectWithoutPropertiesLoose();
init_esm();
init_esm2();
init_createTheme();
init_createPalette();
var _excluded = ["colorSchemes", "opacity"];
var _excluded2 = ["palette"];
var defaultOpacity = {
  active: 0.54,
  hover: 0.04,
  selected: 0.08,
  disabled: 0.26,
  focus: 0.12
};
function createTheme(options = {}, ...args) {
  var _colorSchemesInput$li, _colorSchemesInput$da;
  const {
    colorSchemes: colorSchemesInput = {},
    opacity: opacityInput = {}
  } = options, input = _objectWithoutPropertiesLoose(options, _excluded);
  let _createThemeWithoutVa = createTheme_default(_extends({}, input, colorSchemesInput.light && {
    palette: (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li.palette
  })), {
    palette: lightPalette
  } = _createThemeWithoutVa, muiTheme = _objectWithoutPropertiesLoose(_createThemeWithoutVa, _excluded2);
  const {
    palette: darkPalette
  } = createTheme_default({
    palette: _extends({
      mode: "dark"
    }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette)
  });
  colorSchemesInput.light = {
    palette: lightPalette
  };
  colorSchemesInput.dark = {
    palette: darkPalette
  };
  const colorSchemes = {};
  Object.keys(colorSchemesInput).forEach((key) => {
    const palette = createPalette(colorSchemesInput[key].palette);
    Object.keys(palette).forEach((color) => {
      const colors = palette[color];
      if (colors.main) {
        palette[color].mainChannel = colorChannel(colors.main);
      }
      if (colors.light) {
        palette[color].lightChannel = colorChannel(colors.light);
      }
      if (colors.dark) {
        palette[color].darkChannel = colorChannel(colors.dark);
      }
      if (colors.primary) {
        palette[color].primaryChannel = colorChannel(colors.primary);
      }
      if (colors.secondary) {
        palette[color].secondaryChannel = colorChannel(colors.secondary);
      }
      if (colors.disabled) {
        palette[color].disabledChannel = colorChannel(colors.disabled);
      }
    });
    colorSchemes[key] = {
      palette
    };
  });
  const opacity = _extends({}, defaultOpacity, opacityInput);
  muiTheme.colorSchemes = colorSchemes;
  muiTheme.opacity = opacity;
  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
  return muiTheme;
}
var experimental_extendTheme_default = createTheme;

// node_modules/@mui/material/styles/CssVarsProvider.js
init_createTypography();
var defaultTheme = experimental_extendTheme_default();
var {
  CssVarsProvider: Experimental_CssVarsProvider,
  useColorScheme,
  getInitColorSchemeScript
} = createCssVarsProvider({
  theme: defaultTheme,
  defaultColorScheme: {
    light: "light",
    dark: "dark"
  },
  prefix: "md",
  resolveTheme: (theme) => {
    const newTheme = _extends({}, theme, {
      typography: createTypography(theme.palette, theme.typography)
    });
    return newTheme;
  },
  shouldSkipGeneratingVar: (keys) => !!keys[0].match(/(typography|mixins|breakpoints|direction|transitions)/)
});

// node_modules/@mui/material/Box/Box.js
var defaultTheme2 = createTheme_default();
var Box = createBox({
  defaultTheme: defaultTheme2,
  defaultClassName: "MuiBox-root",
  generateClassName: ClassNameGenerator_default.generate
});
var Box_default = Box;

export {
  getUnit,
  toUnitless,
  Box_default
};
//# sourceMappingURL=chunk-2A5VXTAT.js.map
