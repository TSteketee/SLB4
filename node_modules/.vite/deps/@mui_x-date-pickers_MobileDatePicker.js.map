{
  "version": 3,
  "sources": ["../../@mui/x-date-pickers/MobileDatePicker/MobileDatePicker.js"],
  "sourcesContent": ["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ToolbarComponent\", \"value\", \"onChange\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDatePickerDefaultizedProps } from '../DatePicker/shared';\nimport { DatePickerToolbar } from '../DatePicker/DatePickerToolbar';\nimport { MobileWrapper } from '../internals/components/wrappers/MobileWrapper';\nimport { CalendarOrClockPicker } from '../internals/components/CalendarOrClockPicker';\nimport { useDateValidation } from '../internals/hooks/validation/useDateValidation';\nimport { parsePickerInputValue } from '../internals/utils/date-utils';\nimport { PureDateInput } from '../internals/components/PureDateInput';\nimport { usePickerState } from '../internals/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Picker](https://mui.com/x/react-date-pickers/date-picker/)\n *\n * API:\n *\n * - [MobileDatePicker API](https://mui.com/x/api/date-pickers/mobile-date-picker/)\n */\nexport const MobileDatePicker = /*#__PURE__*/React.forwardRef(function MobileDatePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useDatePickerDefaultizedProps(inProps, 'MuiMobileDatePicker');\n  const validationError = useDateValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(props, valueManager); // Note that we are passing down all the value without spread.\n  // It saves us >1kb gzip and make any prop available automatically on any level down.\n\n  const {\n    ToolbarComponent = DatePickerToolbar\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const DateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(MobileWrapper, _extends({}, other, wrapperProps, {\n    DateInputProps: DateInputProps,\n    PureDateInputComponent: PureDateInput,\n    children: /*#__PURE__*/_jsx(CalendarOrClockPicker, _extends({}, pickerProps, {\n      autoFocus: true,\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: DateInputProps\n    }, other))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MobileDatePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Cancel text message.\n   * @default 'Cancel'\n   */\n  cancelText: PropTypes.node,\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default 'Clear'\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use an HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.object,\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * Props applied to the [`Dialog`](https://mui.com/material-ui/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @template TDateValue\n   * @param {ParseableDate<TDateValue>} value The date from which we want to add an aria-text.\n   * @param {MuiPickersAdapter<TDateValue>} utils The utils to manipulate the date.\n   * @returns {string} The aria-text to render inside the dialog.\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\n   * @returns {string} The label of the view.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Ok button text.\n   * @default 'OK'\n   */\n  okText: PropTypes.node,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   * @template TDateValue\n   * @param {TDateValue} date The date that was just accepted.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   * @template TDate\n   * @param {DateRange<TDate>} date The new parsed date.\n   * @param {string} keyboardInputValue The current value of the keyboard input.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   *\n   * @template TError, TDateValue\n   * @param {TError} reason The reason why the current value is not valid.\n   * @param {TDateValue} value The invalid value.\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   * @template TDate\n   * @param {TDate} month The new month.\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   * @param {CalendarPickerView} view The new view.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Callback firing on year change @DateIOType.\n   * @template TDate\n   * @param {TDate} year The new year.\n   */\n  onYearChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['day', 'month', 'year']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for day. Check the [PickersDay](https://mui.com/x/api/date-pickers/pickers-day/) component.\n   * @template TDate\n   * @param {TDate} day The day to render.\n   * @param {Array<TDate | null>} selectedDates The dates currently selected.\n   * @param {PickersDayProps<TDate>} pickersDayProps The props of the day to render.\n   * @returns {JSX.Element} The element representing the day.\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   * @param {MuiTextFieldPropsType} props The props of the input.\n   * @returns {React.ReactNode} The node to render as the input.\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @returns {React.ReactNode} The node to render when loading.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   * @param {string} str The un-formatted string.\n   * @returns {string} The formatted string.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   * @template TDate\n   * @param {TDate} day The date to check.\n   * @returns {boolean} If `true` the day will be disabled.\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   * @template TDate\n   * @param {TDate} year The year to test.\n   * @returns {boolean} Return `true` if the year should be disabled.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Today text message.\n   * @default 'Today'\n   */\n  todayText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default DatePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default '\u2013'\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default 'Select date'\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired)\n} : void 0;"],
  "mappings": "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",
  "names": []
}
