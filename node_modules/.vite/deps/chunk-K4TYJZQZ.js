import {
  createIsAfterIgnoreDatePart,
  useValidation
} from "./chunk-CFEG7VOA.js";
import {
  Typography_default
} from "./chunk-TX65XND6.js";
import {
  Button_default
} from "./chunk-GBUQ5AOB.js";
import {
  _objectWithoutPropertiesLoose,
  clsx_m_default,
  generateUtilityClasses,
  init_clsx_m,
  init_objectWithoutPropertiesLoose,
  styled_default
} from "./chunk-DFRXNCH6.js";
import {
  _extends,
  init_extends
} from "./chunk-X2GJ65LO.js";
import {
  require_jsx_runtime
} from "./chunk-PU6PRCXW.js";
import {
  require_react
} from "./chunk-3DIIGHPF.js";
import {
  __toESM
} from "./chunk-QOVRSCHT.js";

// node_modules/@mui/x-date-pickers/internals/hooks/validation/useTimeValidation.js
var validateTime = (utils, value, {
  minTime,
  maxTime,
  shouldDisableTime,
  disableIgnoringDatePartForTimeValidation
}) => {
  const date = utils.date(value);
  const isAfterComparingFn = createIsAfterIgnoreDatePart(Boolean(disableIgnoringDatePartForTimeValidation), utils);
  if (value === null) {
    return null;
  }
  switch (true) {
    case !utils.isValid(value):
      return "invalidDate";
    case Boolean(minTime && isAfterComparingFn(minTime, date)):
      return "minTime";
    case Boolean(maxTime && isAfterComparingFn(date, maxTime)):
      return "maxTime";
    case Boolean(shouldDisableTime && shouldDisableTime(utils.getHours(date), "hours")):
      return "shouldDisableTime-hours";
    case Boolean(shouldDisableTime && shouldDisableTime(utils.getMinutes(date), "minutes")):
      return "shouldDisableTime-minutes";
    case Boolean(shouldDisableTime && shouldDisableTime(utils.getSeconds(date), "seconds")):
      return "shouldDisableTime-seconds";
    default:
      return null;
  }
};
var isSameTimeError = (a, b) => a === b;
var useTimeValidation = (props) => useValidation(props, validateTime, isSameTimeError);

// node_modules/@mui/x-date-pickers/internals/components/PickersToolbarText.js
init_extends();
init_objectWithoutPropertiesLoose();
var React = __toESM(require_react());
init_clsx_m();
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["className", "selected", "value"];
var classes = generateUtilityClasses("PrivatePickersToolbarText", ["selected"]);
var PickersToolbarTextRoot = styled_default(Typography_default)(({
  theme
}) => ({
  transition: theme.transitions.create("color"),
  color: theme.palette.text.secondary,
  [`&.${classes.selected}`]: {
    color: theme.palette.text.primary
  }
}));
var PickersToolbarText = React.forwardRef(function PickersToolbarText2(props, ref) {
  const {
    className,
    selected,
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  return (0, import_jsx_runtime.jsx)(PickersToolbarTextRoot, _extends({
    ref,
    className: clsx_m_default(className, selected && classes.selected),
    component: "span"
  }, other, {
    children: value
  }));
});

// node_modules/@mui/x-date-pickers/internals/components/PickersToolbarButton.js
init_extends();
init_objectWithoutPropertiesLoose();
var React2 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var _excluded2 = ["align", "className", "selected", "typographyClassName", "value", "variant"];
var PickersToolbarButtonRoot = styled_default(Button_default)({
  padding: 0,
  minWidth: 16,
  textTransform: "none"
});
var PickersToolbarButton = React2.forwardRef(function PickersToolbarButton2(props, ref) {
  const {
    align,
    className,
    selected,
    typographyClassName,
    value,
    variant
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  return (0, import_jsx_runtime2.jsx)(PickersToolbarButtonRoot, _extends({
    variant: "text",
    ref,
    className
  }, other, {
    children: (0, import_jsx_runtime2.jsx)(PickersToolbarText, {
      align,
      className: typographyClassName,
      variant,
      value,
      selected
    })
  }));
});

export {
  PickersToolbarText,
  PickersToolbarButton,
  validateTime,
  useTimeValidation
};
//# sourceMappingURL=chunk-K4TYJZQZ.js.map
