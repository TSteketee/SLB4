import {
  PickersToolbar,
  useDefaultDates,
  useUtils
} from "./chunk-CFEG7VOA.js";
import {
  Typography_default
} from "./chunk-TX65XND6.js";
import {
  _objectWithoutPropertiesLoose,
  generateUtilityClasses,
  init_objectWithoutPropertiesLoose,
  styled_default,
  useThemeProps2 as useThemeProps
} from "./chunk-DFRXNCH6.js";
import {
  _extends,
  init_extends
} from "./chunk-X2GJ65LO.js";
import {
  require_jsx_runtime
} from "./chunk-PU6PRCXW.js";
import {
  require_react
} from "./chunk-3DIIGHPF.js";
import {
  __toESM
} from "./chunk-QOVRSCHT.js";

// node_modules/@mui/x-date-pickers/DatePicker/shared.js
init_extends();
var isYearOnlyView = (views) => views.length === 1 && views[0] === "year";
var isYearAndMonthViews = (views) => views.length === 2 && views.indexOf("month") !== -1 && views.indexOf("year") !== -1;
var getFormatAndMaskByViews = (views, utils) => {
  if (isYearOnlyView(views)) {
    return {
      mask: "____",
      inputFormat: utils.formats.year
    };
  }
  if (isYearAndMonthViews(views)) {
    return {
      disableMaskedInput: true,
      inputFormat: utils.formats.monthAndYear
    };
  }
  return {
    mask: "__/__/____",
    inputFormat: utils.formats.keyboardDate
  };
};
function useDatePickerDefaultizedProps(props, name) {
  var _themeProps$views;
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const themeProps = useThemeProps({
    props,
    name
  });
  const views = (_themeProps$views = themeProps.views) != null ? _themeProps$views : ["year", "day"];
  return _extends({
    openTo: "day",
    minDate: defaultDates.minDate,
    maxDate: defaultDates.maxDate
  }, getFormatAndMaskByViews(views, utils), themeProps, {
    views
  });
}

// node_modules/@mui/x-date-pickers/DatePicker/DatePickerToolbar.js
init_objectWithoutPropertiesLoose();
init_extends();
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["date", "isLandscape", "isMobileKeyboardViewOpen", "onChange", "toggleMobileKeyboardView", "toolbarFormat", "toolbarPlaceholder", "toolbarTitle", "views"];
var classes = generateUtilityClasses("PrivateDatePickerToolbar", ["penIcon"]);
var DatePickerToolbarRoot = styled_default(PickersToolbar)({
  [`& .${classes.penIcon}`]: {
    position: "relative",
    top: 4
  }
});
var DatePickerToolbarTitle = styled_default(Typography_default)(({
  ownerState
}) => _extends({}, ownerState.isLandscape && {
  margin: "auto 16px auto auto"
}));
var DatePickerToolbar = React.forwardRef(function DatePickerToolbar2(props, ref) {
  const {
    date,
    isLandscape,
    isMobileKeyboardViewOpen,
    toggleMobileKeyboardView,
    toolbarFormat,
    toolbarPlaceholder = "\u2013\u2013",
    toolbarTitle = "Select date",
    views
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const utils = useUtils();
  const dateText = React.useMemo(() => {
    if (!date) {
      return toolbarPlaceholder;
    }
    if (toolbarFormat) {
      return utils.formatByString(date, toolbarFormat);
    }
    if (isYearOnlyView(views)) {
      return utils.format(date, "year");
    }
    if (isYearAndMonthViews(views)) {
      return utils.format(date, "month");
    }
    return /en/.test(utils.getCurrentLocaleCode()) ? utils.format(date, "normalDateWithWeekday") : utils.format(date, "normalDate");
  }, [date, toolbarFormat, toolbarPlaceholder, utils, views]);
  const ownerState = props;
  return (0, import_jsx_runtime.jsx)(DatePickerToolbarRoot, _extends({
    ref,
    toolbarTitle,
    isMobileKeyboardViewOpen,
    toggleMobileKeyboardView,
    isLandscape,
    penIconClassName: classes.penIcon,
    ownerState
  }, other, {
    children: (0, import_jsx_runtime.jsx)(DatePickerToolbarTitle, {
      variant: "h4",
      align: isLandscape ? "left" : "center",
      ownerState,
      children: dateText
    })
  }));
});

export {
  useDatePickerDefaultizedProps,
  DatePickerToolbar
};
//# sourceMappingURL=chunk-FZ4NAWPC.js.map
