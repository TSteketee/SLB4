import {
  PickersToolbarButton,
  PickersToolbarText,
  validateTime
} from "./chunk-K4TYJZQZ.js";
import {
  DesktopWrapper
} from "./chunk-75ABVDFS.js";
import {
  MobileWrapper,
  PureDateInput
} from "./chunk-HFKAWM35.js";
import {
  CalendarOrClockPicker,
  DateRange,
  KeyboardDateInput,
  PickersToolbar,
  Tab_default,
  Tabs_default,
  Time,
  WrapperVariantContext,
  parsePickerInputValue,
  tabsClasses_default,
  useDefaultDates,
  useMediaQuery,
  usePickerState,
  useUtils,
  useValidation,
  validateDate
} from "./chunk-CFEG7VOA.js";
import "./chunk-H4JMEIKX.js";
import "./chunk-V6X6VXPM.js";
import "./chunk-TX65XND6.js";
import "./chunk-L274INN5.js";
import "./chunk-FYKBF7IP.js";
import "./chunk-IQFXJ6OQ.js";
import "./chunk-QNOCGQ7H.js";
import "./chunk-F25A6EIZ.js";
import "./chunk-VXWD3FAJ.js";
import "./chunk-RQZUKIRS.js";
import "./chunk-R2GUKE3D.js";
import "./chunk-TFRKZ3OI.js";
import "./chunk-M6PG4WNC.js";
import "./chunk-2HECV7DU.js";
import "./chunk-O3FKLJWD.js";
import "./chunk-VYI2CPKL.js";
import "./chunk-EHEO7DW7.js";
import "./chunk-2A5VXTAT.js";
import "./chunk-ODLOH7J2.js";
import "./chunk-GBUQ5AOB.js";
import "./chunk-GDU7NSIW.js";
import "./chunk-JC2ZZQ3V.js";
import "./chunk-NYE6VJBI.js";
import "./chunk-U27DTGPU.js";
import "./chunk-NI37SHPO.js";
import "./chunk-DUJFT3RL.js";
import "./chunk-5Y5SDQ7D.js";
import "./chunk-FTVRPCIX.js";
import "./chunk-7DI7VNH6.js";
import "./chunk-FITYNXT2.js";
import "./chunk-PPTFDLOJ.js";
import "./chunk-QVCAQR5W.js";
import "./chunk-62EXJBI4.js";
import "./chunk-XHH4FWTA.js";
import {
  _objectWithoutPropertiesLoose,
  generateUtilityClasses,
  init_objectWithoutPropertiesLoose,
  styled_default,
  useThemeProps2 as useThemeProps
} from "./chunk-DFRXNCH6.js";
import "./chunk-4FPKONJZ.js";
import {
  _extends,
  init_extends
} from "./chunk-X2GJ65LO.js";
import {
  require_jsx_runtime,
  require_prop_types
} from "./chunk-PU6PRCXW.js";
import {
  require_react
} from "./chunk-3DIIGHPF.js";
import {
  __toESM
} from "./chunk-QOVRSCHT.js";

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React5 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/@mui/x-date-pickers/DesktopDateTimePicker/DesktopDateTimePicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React3 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@mui/x-date-pickers/DateTimePicker/shared.js
init_extends();
function useDateTimePickerDefaultizedProps(props, name) {
  var _themeProps$ampm, _ref, _themeProps$minDateTi, _ref2, _themeProps$maxDateTi, _themeProps$minDateTi2, _themeProps$maxDateTi2;
  const themeProps = useThemeProps({
    props,
    name
  });
  const utils = useUtils();
  const defaultDates = useDefaultDates();
  const ampm = (_themeProps$ampm = themeProps.ampm) != null ? _themeProps$ampm : utils.is12HourCycleInCurrentLocale();
  if (themeProps.orientation != null && themeProps.orientation !== "portrait") {
    throw new Error("We are not supporting custom orientation for DateTimePicker yet :(");
  }
  return _extends({
    ampm,
    orientation: "portrait",
    openTo: "day",
    views: ["year", "day", "hours", "minutes"],
    ampmInClock: true,
    showToolbar: false,
    allowSameDateSelection: true,
    mask: "__/__/____ __:__",
    acceptRegex: ampm ? /[\dap]/gi : /\d/gi,
    disableMaskedInput: ampm,
    inputFormat: ampm ? utils.formats.keyboardDateTime12h : utils.formats.keyboardDateTime24h,
    disableIgnoringDatePartForTimeValidation: Boolean(themeProps.minDateTime || themeProps.maxDateTime)
  }, themeProps, {
    minDate: (_ref = (_themeProps$minDateTi = themeProps.minDateTime) != null ? _themeProps$minDateTi : themeProps.minDate) != null ? _ref : defaultDates.minDate,
    maxDate: (_ref2 = (_themeProps$maxDateTi = themeProps.maxDateTime) != null ? _themeProps$maxDateTi : themeProps.maxDate) != null ? _ref2 : defaultDates.maxDate,
    minTime: (_themeProps$minDateTi2 = themeProps.minDateTime) != null ? _themeProps$minDateTi2 : themeProps.minTime,
    maxTime: (_themeProps$maxDateTi2 = themeProps.maxDateTime) != null ? _themeProps$maxDateTi2 : themeProps.maxTime
  });
}

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerToolbar.js
init_extends();
init_objectWithoutPropertiesLoose();
var React2 = __toESM(require_react());

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerTabs.js
init_extends();
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var viewToTab = (openView) => {
  if (["day", "month", "year"].includes(openView)) {
    return "date";
  }
  return "time";
};
var tabToView = (tab) => {
  if (tab === "date") {
    return "day";
  }
  return "hours";
};
var DateTimePickerTabsRoot = styled_default(Tabs_default)(({
  ownerState,
  theme
}) => _extends({
  boxShadow: `0 -1px 0 0 inset ${theme.palette.divider}`
}, ownerState.wrapperVariant === "desktop" && {
  order: 1,
  boxShadow: `0 1px 0 0 inset ${theme.palette.divider}`,
  [`& .${tabsClasses_default.indicator}`]: {
    bottom: "auto",
    top: 0
  }
}));
var DateTimePickerTabs = (props) => {
  const {
    dateRangeIcon = (0, import_jsx_runtime.jsx)(DateRange, {}),
    onChange,
    timeIcon = (0, import_jsx_runtime.jsx)(Time, {}),
    view
  } = props;
  const wrapperVariant = React.useContext(WrapperVariantContext);
  const ownerState = _extends({}, props, {
    wrapperVariant
  });
  const handleChange = (event, value) => {
    onChange(tabToView(value));
  };
  return (0, import_jsx_runtime2.jsxs)(DateTimePickerTabsRoot, {
    ownerState,
    variant: "fullWidth",
    value: viewToTab(view),
    onChange: handleChange,
    children: [(0, import_jsx_runtime.jsx)(Tab_default, {
      value: "date",
      "aria-label": "pick date",
      icon: (0, import_jsx_runtime.jsx)(React.Fragment, {
        children: dateRangeIcon
      })
    }), (0, import_jsx_runtime.jsx)(Tab_default, {
      value: "time",
      "aria-label": "pick time",
      icon: (0, import_jsx_runtime.jsx)(React.Fragment, {
        children: timeIcon
      })
    })]
  });
};

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerToolbar.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var _excluded = ["ampm", "date", "dateRangeIcon", "hideTabs", "isMobileKeyboardViewOpen", "onChange", "openView", "setOpenView", "timeIcon", "toggleMobileKeyboardView", "toolbarFormat", "toolbarPlaceholder", "toolbarTitle", "views"];
var classes = generateUtilityClasses("PrivateDateTimePickerToolbar", ["penIcon"]);
var DateTimePickerToolbarRoot = styled_default(PickersToolbar)({
  paddingLeft: 16,
  paddingRight: 16,
  justifyContent: "space-around",
  [`& .${classes.penIcon}`]: {
    position: "absolute",
    top: 8,
    right: 8
  }
});
var DateTimePickerToolbarDateContainer = styled_default("div")({
  display: "flex",
  flexDirection: "column",
  alignItems: "flex-start"
});
var DateTimePickerToolbarTimeContainer = styled_default("div")({
  display: "flex"
});
var DateTimePickerToolbarSeparator = styled_default(PickersToolbarText)({
  margin: "0 4px 0 2px",
  cursor: "default"
});
var DateTimePickerToolbar = (props) => {
  const {
    ampm,
    date,
    dateRangeIcon,
    hideTabs,
    isMobileKeyboardViewOpen,
    openView,
    setOpenView,
    timeIcon,
    toggleMobileKeyboardView,
    toolbarFormat,
    toolbarPlaceholder = "\u2013\u2013",
    toolbarTitle = "Select date & time",
    views
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const utils = useUtils();
  const wrapperVariant = React2.useContext(WrapperVariantContext);
  const showTabs = wrapperVariant === "desktop" ? true : !hideTabs && typeof window !== "undefined" && window.innerHeight > 667;
  const formatHours = (time) => ampm ? utils.format(time, "hours12h") : utils.format(time, "hours24h");
  const dateText = React2.useMemo(() => {
    if (!date) {
      return toolbarPlaceholder;
    }
    if (toolbarFormat) {
      return utils.formatByString(date, toolbarFormat);
    }
    return utils.format(date, "shortDate");
  }, [date, toolbarFormat, toolbarPlaceholder, utils]);
  return (0, import_jsx_runtime4.jsxs)(React2.Fragment, {
    children: [wrapperVariant !== "desktop" && (0, import_jsx_runtime4.jsxs)(DateTimePickerToolbarRoot, _extends({
      toolbarTitle,
      penIconClassName: classes.penIcon,
      isMobileKeyboardViewOpen,
      toggleMobileKeyboardView
    }, other, {
      isLandscape: false,
      children: [(0, import_jsx_runtime4.jsxs)(DateTimePickerToolbarDateContainer, {
        children: [views.includes("year") && (0, import_jsx_runtime3.jsx)(PickersToolbarButton, {
          tabIndex: -1,
          variant: "subtitle1",
          onClick: () => setOpenView("year"),
          selected: openView === "year",
          value: date ? utils.format(date, "year") : "\u2013"
        }), views.includes("day") && (0, import_jsx_runtime3.jsx)(PickersToolbarButton, {
          tabIndex: -1,
          variant: "h4",
          onClick: () => setOpenView("day"),
          selected: openView === "day",
          value: dateText
        })]
      }), (0, import_jsx_runtime4.jsxs)(DateTimePickerToolbarTimeContainer, {
        children: [views.includes("hours") && (0, import_jsx_runtime3.jsx)(PickersToolbarButton, {
          variant: "h3",
          onClick: () => setOpenView("hours"),
          selected: openView === "hours",
          value: date ? formatHours(date) : "--"
        }), views.includes("minutes") && (0, import_jsx_runtime4.jsxs)(React2.Fragment, {
          children: [(0, import_jsx_runtime3.jsx)(DateTimePickerToolbarSeparator, {
            variant: "h3",
            value: ":"
          }), (0, import_jsx_runtime3.jsx)(PickersToolbarButton, {
            variant: "h3",
            onClick: () => setOpenView("minutes"),
            selected: openView === "minutes",
            value: date ? utils.format(date, "minutes") : "--"
          })]
        }), views.includes("seconds") && (0, import_jsx_runtime4.jsxs)(React2.Fragment, {
          children: [(0, import_jsx_runtime3.jsx)(DateTimePickerToolbarSeparator, {
            variant: "h3",
            value: ":"
          }), (0, import_jsx_runtime3.jsx)(PickersToolbarButton, {
            variant: "h3",
            onClick: () => setOpenView("seconds"),
            selected: openView === "seconds",
            value: date ? utils.format(date, "seconds") : "--"
          })]
        })]
      })]
    })), showTabs && (0, import_jsx_runtime3.jsx)(DateTimePickerTabs, {
      dateRangeIcon,
      timeIcon,
      view: openView,
      onChange: setOpenView
    })]
  });
};

// node_modules/@mui/x-date-pickers/internals/hooks/validation/useDateTimeValidation.js
init_objectWithoutPropertiesLoose();
var _excluded2 = ["minDate", "maxDate", "disableFuture", "shouldDisableDate", "disablePast"];
var validateDateTime = (utils, value, _ref) => {
  let {
    minDate,
    maxDate,
    disableFuture,
    shouldDisableDate,
    disablePast
  } = _ref, timeValidationProps = _objectWithoutPropertiesLoose(_ref, _excluded2);
  const dateValidationResult = validateDate(utils, value, {
    minDate,
    maxDate,
    disableFuture,
    shouldDisableDate,
    disablePast
  });
  if (dateValidationResult !== null) {
    return dateValidationResult;
  }
  return validateTime(utils, value, timeValidationProps);
};
var isSameDateTimeError = (a, b) => a === b;
function useDateTimeValidation(props) {
  return useValidation(props, validateDateTime, isSameDateTimeError);
}

// node_modules/@mui/x-date-pickers/DesktopDateTimePicker/DesktopDateTimePicker.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var _excluded3 = ["onChange", "PopperProps", "ToolbarComponent", "TransitionComponent", "value"];
var valueManager = {
  emptyValue: null,
  parseInput: parsePickerInputValue,
  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)
};
var DesktopDateTimePicker = React3.forwardRef(function DesktopDateTimePicker2(inProps, ref) {
  const props = useDateTimePickerDefaultizedProps(inProps, "MuiDesktopDateTimePicker");
  const validationError = useDateTimeValidation(props) !== null;
  const {
    pickerProps,
    inputProps,
    wrapperProps
  } = usePickerState(props, valueManager);
  const {
    PopperProps,
    ToolbarComponent = DateTimePickerToolbar,
    TransitionComponent
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
  const AllDateInputProps = _extends({}, inputProps, other, {
    ref,
    validationError
  });
  return (0, import_jsx_runtime5.jsx)(DesktopWrapper, _extends({}, wrapperProps, {
    DateInputProps: AllDateInputProps,
    KeyboardDateInputComponent: KeyboardDateInput,
    PopperProps,
    TransitionComponent,
    children: (0, import_jsx_runtime5.jsx)(CalendarOrClockPicker, _extends({}, pickerProps, {
      autoFocus: true,
      toolbarTitle: props.label || props.toolbarTitle,
      ToolbarComponent,
      DateInputProps: AllDateInputProps
    }, other))
  }));
});
true ? DesktopDateTimePicker.propTypes = {
  acceptRegex: import_prop_types.default.instanceOf(RegExp),
  allowSameDateSelection: import_prop_types.default.bool,
  ampm: import_prop_types.default.bool,
  ampmInClock: import_prop_types.default.bool,
  autoFocus: import_prop_types.default.bool,
  children: import_prop_types.default.node,
  className: import_prop_types.default.string,
  clearable: import_prop_types.default.bool,
  clearText: import_prop_types.default.node,
  components: import_prop_types.default.object,
  componentsProps: import_prop_types.default.object,
  dateRangeIcon: import_prop_types.default.node,
  defaultCalendarMonth: import_prop_types.default.any,
  disableCloseOnSelect: import_prop_types.default.bool,
  disabled: import_prop_types.default.bool,
  disableFuture: import_prop_types.default.bool,
  disableHighlightToday: import_prop_types.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types.default.bool,
  disableMaskedInput: import_prop_types.default.bool,
  disableOpenPicker: import_prop_types.default.bool,
  disablePast: import_prop_types.default.bool,
  getClockLabelText: import_prop_types.default.func,
  getOpenDialogAriaText: import_prop_types.default.func,
  getViewSwitchingButtonText: import_prop_types.default.func,
  hideTabs: import_prop_types.default.bool,
  ignoreInvalidInputs: import_prop_types.default.bool,
  InputAdornmentProps: import_prop_types.default.object,
  inputFormat: import_prop_types.default.string,
  InputProps: import_prop_types.default.object,
  inputRef: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.shape({
    current: import_prop_types.default.object
  })]),
  label: import_prop_types.default.node,
  leftArrowButtonText: import_prop_types.default.string,
  loading: import_prop_types.default.bool,
  mask: import_prop_types.default.string,
  maxDate: import_prop_types.default.any,
  maxDateTime: import_prop_types.default.any,
  maxTime: import_prop_types.default.any,
  minDate: import_prop_types.default.any,
  minDateTime: import_prop_types.default.any,
  minTime: import_prop_types.default.any,
  minutesStep: import_prop_types.default.number,
  onAccept: import_prop_types.default.func,
  onChange: import_prop_types.default.func.isRequired,
  onClose: import_prop_types.default.func,
  onError: import_prop_types.default.func,
  onMonthChange: import_prop_types.default.func,
  onOpen: import_prop_types.default.func,
  onViewChange: import_prop_types.default.func,
  onYearChange: import_prop_types.default.func,
  open: import_prop_types.default.bool,
  OpenPickerButtonProps: import_prop_types.default.object,
  openTo: import_prop_types.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
  orientation: import_prop_types.default.oneOf(["landscape", "portrait"]),
  PaperProps: import_prop_types.default.object,
  PopperProps: import_prop_types.default.object,
  readOnly: import_prop_types.default.bool,
  reduceAnimations: import_prop_types.default.bool,
  renderDay: import_prop_types.default.func,
  renderInput: import_prop_types.default.func.isRequired,
  renderLoading: import_prop_types.default.func,
  rifmFormatter: import_prop_types.default.func,
  rightArrowButtonText: import_prop_types.default.string,
  shouldDisableDate: import_prop_types.default.func,
  shouldDisableTime: import_prop_types.default.func,
  shouldDisableYear: import_prop_types.default.func,
  showDaysOutsideCurrentMonth: import_prop_types.default.bool,
  showToolbar: import_prop_types.default.bool,
  timeIcon: import_prop_types.default.node,
  ToolbarComponent: import_prop_types.default.elementType,
  toolbarFormat: import_prop_types.default.string,
  toolbarPlaceholder: import_prop_types.default.node,
  toolbarTitle: import_prop_types.default.node,
  TransitionComponent: import_prop_types.default.elementType,
  value: import_prop_types.default.oneOfType([import_prop_types.default.any, import_prop_types.default.instanceOf(Date), import_prop_types.default.number, import_prop_types.default.string]),
  views: import_prop_types.default.arrayOf(import_prop_types.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired)
} : void 0;

// node_modules/@mui/x-date-pickers/MobileDateTimePicker/MobileDateTimePicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React4 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var _excluded4 = ["ToolbarComponent", "value", "onChange"];
var valueManager2 = {
  emptyValue: null,
  parseInput: parsePickerInputValue,
  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)
};
var MobileDateTimePicker = React4.forwardRef(function MobileDateTimePicker2(inProps, ref) {
  const props = useDateTimePickerDefaultizedProps(inProps, "MuiMobileDateTimePicker");
  const validationError = useDateTimeValidation(props) !== null;
  const {
    pickerProps,
    inputProps,
    wrapperProps
  } = usePickerState(props, valueManager2);
  const {
    ToolbarComponent = DateTimePickerToolbar
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
  const DateInputProps = _extends({}, inputProps, other, {
    ref,
    validationError
  });
  return (0, import_jsx_runtime6.jsx)(MobileWrapper, _extends({}, other, wrapperProps, {
    DateInputProps,
    PureDateInputComponent: PureDateInput,
    children: (0, import_jsx_runtime6.jsx)(CalendarOrClockPicker, _extends({}, pickerProps, {
      autoFocus: true,
      toolbarTitle: props.label || props.toolbarTitle,
      ToolbarComponent,
      DateInputProps
    }, other))
  }));
});
true ? MobileDateTimePicker.propTypes = {
  acceptRegex: import_prop_types2.default.instanceOf(RegExp),
  allowSameDateSelection: import_prop_types2.default.bool,
  ampm: import_prop_types2.default.bool,
  ampmInClock: import_prop_types2.default.bool,
  autoFocus: import_prop_types2.default.bool,
  cancelText: import_prop_types2.default.node,
  children: import_prop_types2.default.node,
  className: import_prop_types2.default.string,
  clearable: import_prop_types2.default.bool,
  clearText: import_prop_types2.default.node,
  components: import_prop_types2.default.object,
  componentsProps: import_prop_types2.default.object,
  dateRangeIcon: import_prop_types2.default.node,
  defaultCalendarMonth: import_prop_types2.default.any,
  DialogProps: import_prop_types2.default.object,
  disableCloseOnSelect: import_prop_types2.default.bool,
  disabled: import_prop_types2.default.bool,
  disableFuture: import_prop_types2.default.bool,
  disableHighlightToday: import_prop_types2.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types2.default.bool,
  disableMaskedInput: import_prop_types2.default.bool,
  disableOpenPicker: import_prop_types2.default.bool,
  disablePast: import_prop_types2.default.bool,
  getClockLabelText: import_prop_types2.default.func,
  getOpenDialogAriaText: import_prop_types2.default.func,
  getViewSwitchingButtonText: import_prop_types2.default.func,
  hideTabs: import_prop_types2.default.bool,
  ignoreInvalidInputs: import_prop_types2.default.bool,
  InputAdornmentProps: import_prop_types2.default.object,
  inputFormat: import_prop_types2.default.string,
  InputProps: import_prop_types2.default.object,
  inputRef: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.shape({
    current: import_prop_types2.default.object
  })]),
  label: import_prop_types2.default.node,
  leftArrowButtonText: import_prop_types2.default.string,
  loading: import_prop_types2.default.bool,
  mask: import_prop_types2.default.string,
  maxDate: import_prop_types2.default.any,
  maxDateTime: import_prop_types2.default.any,
  maxTime: import_prop_types2.default.any,
  minDate: import_prop_types2.default.any,
  minDateTime: import_prop_types2.default.any,
  minTime: import_prop_types2.default.any,
  minutesStep: import_prop_types2.default.number,
  okText: import_prop_types2.default.node,
  onAccept: import_prop_types2.default.func,
  onChange: import_prop_types2.default.func.isRequired,
  onClose: import_prop_types2.default.func,
  onError: import_prop_types2.default.func,
  onMonthChange: import_prop_types2.default.func,
  onOpen: import_prop_types2.default.func,
  onViewChange: import_prop_types2.default.func,
  onYearChange: import_prop_types2.default.func,
  open: import_prop_types2.default.bool,
  OpenPickerButtonProps: import_prop_types2.default.object,
  openTo: import_prop_types2.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
  orientation: import_prop_types2.default.oneOf(["landscape", "portrait"]),
  readOnly: import_prop_types2.default.bool,
  reduceAnimations: import_prop_types2.default.bool,
  renderDay: import_prop_types2.default.func,
  renderInput: import_prop_types2.default.func.isRequired,
  renderLoading: import_prop_types2.default.func,
  rifmFormatter: import_prop_types2.default.func,
  rightArrowButtonText: import_prop_types2.default.string,
  shouldDisableDate: import_prop_types2.default.func,
  shouldDisableTime: import_prop_types2.default.func,
  shouldDisableYear: import_prop_types2.default.func,
  showDaysOutsideCurrentMonth: import_prop_types2.default.bool,
  showTodayButton: import_prop_types2.default.bool,
  showToolbar: import_prop_types2.default.bool,
  timeIcon: import_prop_types2.default.node,
  todayText: import_prop_types2.default.node,
  ToolbarComponent: import_prop_types2.default.elementType,
  toolbarFormat: import_prop_types2.default.string,
  toolbarPlaceholder: import_prop_types2.default.node,
  toolbarTitle: import_prop_types2.default.node,
  value: import_prop_types2.default.oneOfType([import_prop_types2.default.any, import_prop_types2.default.instanceOf(Date), import_prop_types2.default.number, import_prop_types2.default.string]),
  views: import_prop_types2.default.arrayOf(import_prop_types2.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired)
} : void 0;

// node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePicker.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var _excluded5 = ["cancelText", "desktopModeMediaQuery", "DialogProps", "okText", "PopperProps", "showTodayButton", "todayText", "TransitionComponent"];
var DateTimePicker = React5.forwardRef(function DateTimePicker2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiDateTimePicker"
  });
  const {
    cancelText,
    desktopModeMediaQuery = "@media (pointer: fine)",
    DialogProps,
    okText,
    PopperProps,
    showTodayButton,
    todayText,
    TransitionComponent
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);
  const isDesktop = useMediaQuery(desktopModeMediaQuery);
  if (isDesktop) {
    return (0, import_jsx_runtime7.jsx)(DesktopDateTimePicker, _extends({
      ref,
      PopperProps,
      TransitionComponent
    }, other));
  }
  return (0, import_jsx_runtime7.jsx)(MobileDateTimePicker, _extends({
    ref,
    cancelText,
    DialogProps,
    okText,
    showTodayButton,
    todayText
  }, other));
});
true ? DateTimePicker.propTypes = {
  acceptRegex: import_prop_types3.default.instanceOf(RegExp),
  allowSameDateSelection: import_prop_types3.default.bool,
  ampm: import_prop_types3.default.bool,
  ampmInClock: import_prop_types3.default.bool,
  autoFocus: import_prop_types3.default.bool,
  cancelText: import_prop_types3.default.node,
  children: import_prop_types3.default.node,
  className: import_prop_types3.default.string,
  clearable: import_prop_types3.default.bool,
  clearText: import_prop_types3.default.node,
  components: import_prop_types3.default.object,
  componentsProps: import_prop_types3.default.object,
  dateRangeIcon: import_prop_types3.default.node,
  defaultCalendarMonth: import_prop_types3.default.any,
  desktopModeMediaQuery: import_prop_types3.default.string,
  DialogProps: import_prop_types3.default.object,
  disableCloseOnSelect: import_prop_types3.default.bool,
  disabled: import_prop_types3.default.bool,
  disableFuture: import_prop_types3.default.bool,
  disableHighlightToday: import_prop_types3.default.bool,
  disableIgnoringDatePartForTimeValidation: import_prop_types3.default.bool,
  disableMaskedInput: import_prop_types3.default.bool,
  disableOpenPicker: import_prop_types3.default.bool,
  disablePast: import_prop_types3.default.bool,
  getClockLabelText: import_prop_types3.default.func,
  getOpenDialogAriaText: import_prop_types3.default.func,
  getViewSwitchingButtonText: import_prop_types3.default.func,
  hideTabs: import_prop_types3.default.bool,
  ignoreInvalidInputs: import_prop_types3.default.bool,
  InputAdornmentProps: import_prop_types3.default.object,
  inputFormat: import_prop_types3.default.string,
  InputProps: import_prop_types3.default.object,
  inputRef: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.shape({
    current: import_prop_types3.default.object
  })]),
  label: import_prop_types3.default.node,
  leftArrowButtonText: import_prop_types3.default.string,
  loading: import_prop_types3.default.bool,
  mask: import_prop_types3.default.string,
  maxDate: import_prop_types3.default.any,
  maxDateTime: import_prop_types3.default.any,
  maxTime: import_prop_types3.default.any,
  minDate: import_prop_types3.default.any,
  minDateTime: import_prop_types3.default.any,
  minTime: import_prop_types3.default.any,
  minutesStep: import_prop_types3.default.number,
  okText: import_prop_types3.default.node,
  onAccept: import_prop_types3.default.func,
  onChange: import_prop_types3.default.func.isRequired,
  onClose: import_prop_types3.default.func,
  onError: import_prop_types3.default.func,
  onMonthChange: import_prop_types3.default.func,
  onOpen: import_prop_types3.default.func,
  onViewChange: import_prop_types3.default.func,
  onYearChange: import_prop_types3.default.func,
  open: import_prop_types3.default.bool,
  OpenPickerButtonProps: import_prop_types3.default.object,
  openTo: import_prop_types3.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
  orientation: import_prop_types3.default.oneOf(["landscape", "portrait"]),
  PaperProps: import_prop_types3.default.object,
  PopperProps: import_prop_types3.default.object,
  readOnly: import_prop_types3.default.bool,
  reduceAnimations: import_prop_types3.default.bool,
  renderDay: import_prop_types3.default.func,
  renderInput: import_prop_types3.default.func.isRequired,
  renderLoading: import_prop_types3.default.func,
  rifmFormatter: import_prop_types3.default.func,
  rightArrowButtonText: import_prop_types3.default.string,
  shouldDisableDate: import_prop_types3.default.func,
  shouldDisableTime: import_prop_types3.default.func,
  shouldDisableYear: import_prop_types3.default.func,
  showDaysOutsideCurrentMonth: import_prop_types3.default.bool,
  showTodayButton: import_prop_types3.default.bool,
  showToolbar: import_prop_types3.default.bool,
  timeIcon: import_prop_types3.default.node,
  todayText: import_prop_types3.default.node,
  ToolbarComponent: import_prop_types3.default.elementType,
  toolbarFormat: import_prop_types3.default.string,
  toolbarPlaceholder: import_prop_types3.default.node,
  toolbarTitle: import_prop_types3.default.node,
  TransitionComponent: import_prop_types3.default.elementType,
  value: import_prop_types3.default.oneOfType([import_prop_types3.default.any, import_prop_types3.default.instanceOf(Date), import_prop_types3.default.number, import_prop_types3.default.string]),
  views: import_prop_types3.default.arrayOf(import_prop_types3.default.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired)
} : void 0;
export {
  DateTimePicker
};
//# sourceMappingURL=@mui_x-date-pickers_DateTimePicker.js.map
