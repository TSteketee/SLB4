import {
  DialogActions_default,
  Popper_default,
  WrapperVariantContext
} from "./chunk-CFEG7VOA.js";
import {
  init_utils
} from "./chunk-H4JMEIKX.js";
import {
  Grow_default
} from "./chunk-QNOCGQ7H.js";
import {
  ownerDocument_default
} from "./chunk-F25A6EIZ.js";
import {
  Button_default
} from "./chunk-GBUQ5AOB.js";
import {
  useEventCallback_default
} from "./chunk-JC2ZZQ3V.js";
import {
  useForkRef_default
} from "./chunk-U27DTGPU.js";
import {
  Paper_default
} from "./chunk-FTVRPCIX.js";
import {
  TrapFocus_default,
  _objectWithoutPropertiesLoose,
  init_TrapFocus,
  init_objectWithoutPropertiesLoose,
  styled_default
} from "./chunk-DFRXNCH6.js";
import {
  _extends,
  init_extends
} from "./chunk-X2GJ65LO.js";
import {
  require_jsx_runtime
} from "./chunk-PU6PRCXW.js";
import {
  require_react
} from "./chunk-3DIIGHPF.js";
import {
  __toESM
} from "./chunk-QOVRSCHT.js";

// node_modules/@mui/x-date-pickers/internals/components/wrappers/DesktopWrapper.js
init_extends();
var React2 = __toESM(require_react());
init_utils();

// node_modules/@mui/x-date-pickers/internals/components/PickersPopper.js
init_objectWithoutPropertiesLoose();
init_extends();
var React = __toESM(require_react());

// node_modules/@mui/material/Unstable_TrapFocus/index.js
init_TrapFocus();

// node_modules/@mui/x-date-pickers/internals/components/PickersPopper.js
init_utils();
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var _excluded = ["onClick", "onTouchStart"];
var PickersPopperRoot = styled_default(Popper_default)(({
  theme
}) => ({
  zIndex: theme.zIndex.modal
}));
var PickersPopperPaper = styled_default(Paper_default)(({
  ownerState
}) => _extends({
  transformOrigin: "top center",
  outline: 0
}, ownerState.placement === "top" && {
  transformOrigin: "bottom center"
}));
var PickersPopperAction = styled_default(DialogActions_default)(({
  ownerState
}) => _extends({}, ownerState.clearable ? {
  justifyContent: "flex-start",
  "& > *:first-of-type": {
    marginRight: "auto"
  }
} : {
  padding: 0
}));
function clickedRootScrollbar(event, doc) {
  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
}
function useClickAwayListener(active, onClickAway) {
  const movedRef = React.useRef(false);
  const syntheticEventRef = React.useRef(false);
  const nodeRef = React.useRef(null);
  const activatedRef = React.useRef(false);
  React.useEffect(() => {
    if (!active) {
      return void 0;
    }
    function armClickAwayListener() {
      activatedRef.current = true;
    }
    document.addEventListener("mousedown", armClickAwayListener, true);
    document.addEventListener("touchstart", armClickAwayListener, true);
    return () => {
      document.removeEventListener("mousedown", armClickAwayListener, true);
      document.removeEventListener("touchstart", armClickAwayListener, true);
      activatedRef.current = false;
    };
  }, [active]);
  const handleClickAway = useEventCallback_default((event) => {
    if (!activatedRef.current) {
      return;
    }
    const insideReactTree = syntheticEventRef.current;
    syntheticEventRef.current = false;
    const doc = ownerDocument_default(nodeRef.current);
    if (!nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
      return;
    }
    if (movedRef.current) {
      movedRef.current = false;
      return;
    }
    let insideDOM;
    if (event.composedPath) {
      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
    } else {
      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
    }
    if (!insideDOM && !insideReactTree) {
      onClickAway(event);
    }
  });
  const handleSynthetic = () => {
    syntheticEventRef.current = true;
  };
  React.useEffect(() => {
    if (active) {
      const doc = ownerDocument_default(nodeRef.current);
      const handleTouchMove = () => {
        movedRef.current = true;
      };
      doc.addEventListener("touchstart", handleClickAway);
      doc.addEventListener("touchmove", handleTouchMove);
      return () => {
        doc.removeEventListener("touchstart", handleClickAway);
        doc.removeEventListener("touchmove", handleTouchMove);
      };
    }
    return void 0;
  }, [active, handleClickAway]);
  React.useEffect(() => {
    if (active) {
      const doc = ownerDocument_default(nodeRef.current);
      doc.addEventListener("click", handleClickAway);
      return () => {
        doc.removeEventListener("click", handleClickAway);
        syntheticEventRef.current = false;
      };
    }
    return void 0;
  }, [active, handleClickAway]);
  return [nodeRef, handleSynthetic, handleSynthetic];
}
var PickersPopper = (props) => {
  const {
    anchorEl,
    children,
    containerRef = null,
    onClose,
    onClear,
    clearable = false,
    clearText = "Clear",
    open,
    PopperProps,
    role,
    TransitionComponent = Grow_default,
    TrapFocusProps,
    PaperProps = {}
  } = props;
  React.useEffect(() => {
    function handleKeyDown(nativeEvent) {
      if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
        onClose();
      }
    }
    document.addEventListener("keydown", handleKeyDown);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, [onClose]);
  const lastFocusedElementRef = React.useRef(null);
  React.useEffect(() => {
    if (role === "tooltip") {
      return;
    }
    if (open) {
      lastFocusedElementRef.current = document.activeElement;
    } else if (lastFocusedElementRef.current && lastFocusedElementRef.current instanceof HTMLElement) {
      lastFocusedElementRef.current.focus();
    }
  }, [open, role]);
  const [clickAwayRef, onPaperClick, onPaperTouchStart] = useClickAwayListener(open, onClose);
  const paperRef = React.useRef(null);
  const handleRef = useForkRef_default(paperRef, containerRef);
  const handlePaperRef = useForkRef_default(handleRef, clickAwayRef);
  const ownerState = props;
  const {
    onClick: onPaperClickProp,
    onTouchStart: onPaperTouchStartProp
  } = PaperProps, otherPaperProps = _objectWithoutPropertiesLoose(PaperProps, _excluded);
  return (0, import_jsx_runtime.jsx)(PickersPopperRoot, _extends({
    transition: true,
    role,
    open,
    anchorEl,
    ownerState
  }, PopperProps, {
    children: ({
      TransitionProps,
      placement
    }) => (0, import_jsx_runtime.jsx)(TrapFocus_default, _extends({
      open,
      disableAutoFocus: true,
      disableEnforceFocus: role === "tooltip",
      isEnabled: () => true
    }, TrapFocusProps, {
      children: (0, import_jsx_runtime.jsx)(TransitionComponent, _extends({}, TransitionProps, {
        children: (0, import_jsx_runtime2.jsxs)(PickersPopperPaper, _extends({
          tabIndex: -1,
          elevation: 8,
          ref: handlePaperRef,
          onClick: (event) => {
            onPaperClick(event);
            if (onPaperClickProp) {
              onPaperClickProp(event);
            }
          },
          onTouchStart: (event) => {
            onPaperTouchStart(event);
            if (onPaperTouchStartProp) {
              onPaperTouchStartProp(event);
            }
          },
          ownerState: _extends({}, ownerState, {
            placement
          })
        }, otherPaperProps, {
          children: [children, (0, import_jsx_runtime.jsx)(PickersPopperAction, {
            ownerState,
            children: clearable && (0, import_jsx_runtime.jsx)(Button_default, {
              onClick: onClear,
              children: clearText
            })
          })]
        }))
      }))
    }))
  }));
};

// node_modules/@mui/x-date-pickers/internals/components/wrappers/DesktopWrapper.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
function DesktopWrapper(props) {
  const {
    children,
    DateInputProps,
    KeyboardDateInputComponent,
    onDismiss,
    open,
    PopperProps,
    PaperProps,
    TransitionComponent,
    onClear,
    clearText,
    clearable
  } = props;
  const ownInputRef = React2.useRef(null);
  const inputRef = useForkRef_default(DateInputProps.inputRef, ownInputRef);
  return (0, import_jsx_runtime4.jsxs)(WrapperVariantContext.Provider, {
    value: "desktop",
    children: [(0, import_jsx_runtime3.jsx)(KeyboardDateInputComponent, _extends({}, DateInputProps, {
      inputRef
    })), (0, import_jsx_runtime3.jsx)(PickersPopper, {
      role: "dialog",
      open,
      anchorEl: ownInputRef.current,
      TransitionComponent,
      PopperProps,
      PaperProps,
      onClose: onDismiss,
      onClear,
      clearText,
      clearable,
      children
    })]
  });
}

export {
  DesktopWrapper
};
//# sourceMappingURL=chunk-75ABVDFS.js.map
