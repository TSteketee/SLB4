import {
  DesktopWrapper
} from "./chunk-75ABVDFS.js";
import {
  DatePickerToolbar,
  useDatePickerDefaultizedProps
} from "./chunk-FZ4NAWPC.js";
import {
  CalendarOrClockPicker,
  KeyboardDateInput,
  parsePickerInputValue,
  useDateValidation,
  usePickerState
} from "./chunk-CFEG7VOA.js";
import "./chunk-H4JMEIKX.js";
import "./chunk-V6X6VXPM.js";
import "./chunk-TX65XND6.js";
import "./chunk-L274INN5.js";
import "./chunk-FYKBF7IP.js";
import "./chunk-IQFXJ6OQ.js";
import "./chunk-QNOCGQ7H.js";
import "./chunk-F25A6EIZ.js";
import "./chunk-VXWD3FAJ.js";
import "./chunk-RQZUKIRS.js";
import "./chunk-R2GUKE3D.js";
import "./chunk-TFRKZ3OI.js";
import "./chunk-M6PG4WNC.js";
import "./chunk-2HECV7DU.js";
import "./chunk-O3FKLJWD.js";
import "./chunk-VYI2CPKL.js";
import "./chunk-EHEO7DW7.js";
import "./chunk-2A5VXTAT.js";
import "./chunk-ODLOH7J2.js";
import "./chunk-GBUQ5AOB.js";
import "./chunk-GDU7NSIW.js";
import "./chunk-JC2ZZQ3V.js";
import "./chunk-NYE6VJBI.js";
import "./chunk-U27DTGPU.js";
import "./chunk-NI37SHPO.js";
import "./chunk-DUJFT3RL.js";
import "./chunk-5Y5SDQ7D.js";
import "./chunk-FTVRPCIX.js";
import "./chunk-7DI7VNH6.js";
import "./chunk-FITYNXT2.js";
import "./chunk-PPTFDLOJ.js";
import "./chunk-QVCAQR5W.js";
import "./chunk-62EXJBI4.js";
import "./chunk-XHH4FWTA.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose
} from "./chunk-DFRXNCH6.js";
import "./chunk-4FPKONJZ.js";
import {
  _extends,
  init_extends
} from "./chunk-X2GJ65LO.js";
import {
  require_jsx_runtime,
  require_prop_types
} from "./chunk-PU6PRCXW.js";
import {
  require_react
} from "./chunk-3DIIGHPF.js";
import {
  __toESM
} from "./chunk-QOVRSCHT.js";

// node_modules/@mui/x-date-pickers/DesktopDatePicker/DesktopDatePicker.js
init_extends();
init_objectWithoutPropertiesLoose();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["onChange", "PopperProps", "PaperProps", "ToolbarComponent", "TransitionComponent", "value", "clearText", "clearable"];
var valueManager = {
  emptyValue: null,
  parseInput: parsePickerInputValue,
  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)
};
var DesktopDatePicker = React.forwardRef(function DesktopDatePicker2(inProps, ref) {
  const props = useDatePickerDefaultizedProps(inProps, "MuiDesktopDatePicker");
  const validationError = useDateValidation(props) !== null;
  const {
    pickerProps,
    inputProps,
    wrapperProps
  } = usePickerState(props, valueManager);
  const {
    PopperProps,
    PaperProps,
    ToolbarComponent = DatePickerToolbar,
    TransitionComponent,
    clearText,
    clearable
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const AllDateInputProps = _extends({}, inputProps, other, {
    ref,
    validationError
  });
  return (0, import_jsx_runtime.jsx)(DesktopWrapper, _extends({}, wrapperProps, {
    DateInputProps: AllDateInputProps,
    KeyboardDateInputComponent: KeyboardDateInput,
    PopperProps,
    PaperProps,
    TransitionComponent,
    clearText,
    clearable,
    children: (0, import_jsx_runtime.jsx)(CalendarOrClockPicker, _extends({}, pickerProps, {
      autoFocus: true,
      toolbarTitle: props.label || props.toolbarTitle,
      ToolbarComponent,
      DateInputProps: AllDateInputProps
    }, other))
  }));
});
true ? DesktopDatePicker.propTypes = {
  acceptRegex: import_prop_types.default.instanceOf(RegExp),
  allowSameDateSelection: import_prop_types.default.bool,
  autoFocus: import_prop_types.default.bool,
  children: import_prop_types.default.node,
  className: import_prop_types.default.string,
  clearable: import_prop_types.default.bool,
  clearText: import_prop_types.default.node,
  components: import_prop_types.default.object,
  componentsProps: import_prop_types.default.object,
  defaultCalendarMonth: import_prop_types.default.any,
  disableCloseOnSelect: import_prop_types.default.bool,
  disabled: import_prop_types.default.bool,
  disableFuture: import_prop_types.default.bool,
  disableHighlightToday: import_prop_types.default.bool,
  disableMaskedInput: import_prop_types.default.bool,
  disableOpenPicker: import_prop_types.default.bool,
  disablePast: import_prop_types.default.bool,
  getOpenDialogAriaText: import_prop_types.default.func,
  getViewSwitchingButtonText: import_prop_types.default.func,
  ignoreInvalidInputs: import_prop_types.default.bool,
  InputAdornmentProps: import_prop_types.default.object,
  inputFormat: import_prop_types.default.string,
  InputProps: import_prop_types.default.object,
  inputRef: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.shape({
    current: import_prop_types.default.object
  })]),
  label: import_prop_types.default.node,
  leftArrowButtonText: import_prop_types.default.string,
  loading: import_prop_types.default.bool,
  mask: import_prop_types.default.string,
  maxDate: import_prop_types.default.any,
  minDate: import_prop_types.default.any,
  onAccept: import_prop_types.default.func,
  onChange: import_prop_types.default.func.isRequired,
  onClose: import_prop_types.default.func,
  onError: import_prop_types.default.func,
  onMonthChange: import_prop_types.default.func,
  onOpen: import_prop_types.default.func,
  onViewChange: import_prop_types.default.func,
  onYearChange: import_prop_types.default.func,
  open: import_prop_types.default.bool,
  OpenPickerButtonProps: import_prop_types.default.object,
  openTo: import_prop_types.default.oneOf(["day", "month", "year"]),
  orientation: import_prop_types.default.oneOf(["landscape", "portrait"]),
  PaperProps: import_prop_types.default.object,
  PopperProps: import_prop_types.default.object,
  readOnly: import_prop_types.default.bool,
  reduceAnimations: import_prop_types.default.bool,
  renderDay: import_prop_types.default.func,
  renderInput: import_prop_types.default.func.isRequired,
  renderLoading: import_prop_types.default.func,
  rifmFormatter: import_prop_types.default.func,
  rightArrowButtonText: import_prop_types.default.string,
  shouldDisableDate: import_prop_types.default.func,
  shouldDisableYear: import_prop_types.default.func,
  showDaysOutsideCurrentMonth: import_prop_types.default.bool,
  showToolbar: import_prop_types.default.bool,
  ToolbarComponent: import_prop_types.default.elementType,
  toolbarFormat: import_prop_types.default.string,
  toolbarPlaceholder: import_prop_types.default.node,
  toolbarTitle: import_prop_types.default.node,
  TransitionComponent: import_prop_types.default.elementType,
  value: import_prop_types.default.oneOfType([import_prop_types.default.any, import_prop_types.default.instanceOf(Date), import_prop_types.default.number, import_prop_types.default.string]),
  views: import_prop_types.default.arrayOf(import_prop_types.default.oneOf(["day", "month", "year"]).isRequired)
} : void 0;
export {
  DesktopDatePicker
};
//# sourceMappingURL=@mui_x-date-pickers_DesktopDatePicker.js.map
